# Based on these extensions 
# https://marketplace.visualstudio.com/items?itemName=charleszipp.azure-pipelines-tasks-terraform
# https://marketplace.visualstudio.com/acquisition?itemName=ms-devlabs.custom-terraform-tasks
# https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.aws-vsts-tools
parameters:
- name: environment
  type: string
  default:
- name: workingdir
  type: string
  default:
- name: connection
  type: string
  default:
- name: statefile
  type: string
  default:
- name: options
  type: string
  default:
- name: aws_region
  type: string
  default:
- name: aws_bucket
  type: string
  default:

stages:
- stage: plan
  displayName: Plan
  dependsOn:
  pool:
    vmImage: ubuntu-latest
  jobs:
  - job: terraform
    displayName: Terraform
    steps:
      - task: TerraformCLI@0
        displayName: Init
        inputs:
          command: init
          workingDirectory: $(System.DefaultWorkingDirectory)/${{ parameters.workingdir }}
          allowTelemetryCollection: false
          backendType: aws
          backendServiceAws: ${{ parameters.connection }}
          backendAwsRegion: ${{ parameters.aws_region }}
          backendAwsBucket: ${{ parameters.aws_bucket }}
          backendAwsKey: ${{ parameters.statefile }}
          commandOptions: --upgrade

      - task: TerraformCLI@0
        displayName: Plan
        inputs:
          command: plan
          workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.workingdir }}'
          allowTelemetryCollection: false
          environmentServiceName: ${{ parameters.connection }}
          commandOptions: '-out=tfplan ${{ parameters.options }}'

      - task: CopyFiles@2
        displayName: Copy artifacts
        inputs:
          SourceFolder: $(System.DefaultWorkingDirectory)/${{ parameters.workingdir }}
          Contents: |
            **
            !.terraform/**
          TargetFolder: $(Build.ArtifactStagingDirectory)

      - task: PublishBuildArtifacts@1
        displayName: Publish artifacts
        inputs:
          PathtoPublish: $(Build.ArtifactStagingDirectory)
          artifactName: terraform

#- task: TerraformCLI@0
#  displayName: 'terraform apply'
#  condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true'))
#  inputs:
#    command: apply
#    environmentServiceName: 'My Azure Service Connection'
#    commandOptions: '$(System.DefaultWorkingDirectory)/terraform.tfplan'

- stage: apply
  displayName: Apply
  dependsOn: plan
  pool:
    vmImage: ubuntu-latest
  jobs:
  - deployment: terraform
    displayName: Terraform
    environment: ${{ parameters.environment }}
    strategy: 
      runOnce:
        deploy:
          steps:
            - task: TerraformCLI@0
              displayName: Init
              inputs:
                command: init
                workingDirectory: $(Pipeline.Workspace)/terraform/${{ parameters.workingdir }}
                allowTelemetryCollection: false
                backendType: aws
                backendServiceAws: ${{ parameters.connection }}
                backendAwsRegion: ${{ parameters.aws_region }}
                backendAwsBucket: ${{ parameters.aws_bucket }}
                backendAwsKey: ${{ parameters.statefile }}
                commandOptions: --upgrade