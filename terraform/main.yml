parameters:
- name: environment
  type: string
  default:
- name: workingdir
  type: string
  default:
- name: connection
  type: string
  default:
- name: statefile
  type: string
  default:
- name: options
  type: string
  default:

stages:
- stage: plan
  displayName: Plan
  dependsOn:
  pool:
    vmImage: ubuntu-latest
  jobs:
  - job: terraform
    displayName: Terraform
    steps:
      - task: TerraformTaskV2@2
        displayName: 'Terraform init'
        inputs:
          provider: azurerm
          command: init
          workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.workingdir }}'
          backendServiceArm: azure
          backendAzureRmResourceGroupName: terraform
          backendAzureRmStorageAccountName: terraformstate
          backendAzureRmContainerName: tfstate
          backendAzureRmKey: ${{ parameters.statefile }}
          commandOptions: --upgrade

      - task: TerraformTaskV2@2
        displayName: 'Terraform plan'
        inputs:
          provider: azurerm
          command: plan
          workingDirectory: '$(System.DefaultWorkingDirectory)/${{ parameters.workingdir }}'
          environmentServiceNameAzureRM: '${{ parameters.connection }}'
          commandOptions: '-out=tfplan ${{ parameters.options }}'

      - task: CopyFiles@2
        displayName: Copy artifacts
        inputs:
          SourceFolder: $(System.DefaultWorkingDirectory)/${{ parameters.workingDirectory }}
          Contents: |
            **
            !.terraform/**
          TargetFolder: $(Build.ArtifactStagingDirectory)

      - task: PublishBuildArtifacts@1
        displayName: Publish artifacts
        inputs:
          PathtoPublish: $(Build.ArtifactStagingDirectory)
          artifactName: terraform

- stage: apply
  displayName: Apply
  dependsOn: plan
  pool:
    vmImage: ubuntu-latest
  jobs:
  - deployment: terraform
    displayName: Terraform
    environment: ${{ parameters.environment }}
    strategy: 
      runOnce:
        deploy:
          steps:
            - task: TerraformTaskV2@2
              displayName: 'Terraform init'
              inputs:
                provider: azurerm
                command: init
                workingDirectory: '$(Pipeline.Workspace)/terraform/${{ parameters.workingdir }}'
                backendServiceArm: azure
                backendAzureRmResourceGroupName: terraform
                backendAzureRmStorageAccountName: terraformstate
                backendAzureRmContainerName: tfstate
                backendAzureRmKey: ${{ parameters.statefile }}